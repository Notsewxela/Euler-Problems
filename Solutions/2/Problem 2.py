'''
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''

import numpy as np

#initialise our fibonacci values in a list (normally is 1, 1)
vals = [1, 2]

#max allowed number
limit = 4e6

#i is index variable
i = 0
#while fibonacci value is below 4 million, work out next fibonacci number
while vals[-1] < limit:
    vals.append(vals[i] + vals[i+1])
    i += 1

#if last number we calculated is too big remove it (this if is a perfect exampole of the case for do while loops in python...)
if vals[-1] > limit:
    vals.pop()

vals = np.array(vals)

#find all the even digits
val2 = vals % 2

#make all not-even digits 0
vals[val2 != 0] = 0

print(np.sum(vals))